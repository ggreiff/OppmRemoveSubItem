//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 
namespace wsPortfoliosItem {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="psPortfoliosItemSoap", Namespace="http://prosight.com/wsdl/5.0/psPortfoliosItem/")]
    public partial class psPortfoliosItem : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DebugOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCurrentPhaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCommonIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCommonIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIDependOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDependantOnMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDependantsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDependantOnMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveIDependOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDependantOnMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIDByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewExOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchronizeExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLifeCycleNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDependsOnItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSupportsItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDependsOnItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportsItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveDependsOnItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSupportsItemsOperationCompleted;
        
        /// <remarks/>
        public psPortfoliosItem() {
            this.Url = "http://localhost/ProSightWs/psPortfoliosItem.asmx";
        }
        
        /// <remarks/>
        public event DebugCompletedEventHandler DebugCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event SetCurrentPhaseCompletedEventHandler SetCurrentPhaseCompleted;
        
        /// <remarks/>
        public event SetCommonIdCompletedEventHandler SetCommonIdCompleted;
        
        /// <remarks/>
        public event RemoveCommonIdCompletedEventHandler RemoveCommonIdCompleted;
        
        /// <remarks/>
        public event AddIDependOnCompletedEventHandler AddIDependOnCompleted;
        
        /// <remarks/>
        public event AddDependantOnMeCompletedEventHandler AddDependantOnMeCompleted;
        
        /// <remarks/>
        public event GetDependantsCompletedEventHandler GetDependantsCompleted;
        
        /// <remarks/>
        public event GetDependantOnMeCompletedEventHandler GetDependantOnMeCompleted;
        
        /// <remarks/>
        public event RemoveIDependOnCompletedEventHandler RemoveIDependOnCompleted;
        
        /// <remarks/>
        public event RemoveDependantOnMeCompletedEventHandler RemoveDependantOnMeCompleted;
        
        /// <remarks/>
        public event GetIDByNameCompletedEventHandler GetIDByNameCompleted;
        
        /// <remarks/>
        public event AddNewExCompletedEventHandler AddNewExCompleted;
        
        /// <remarks/>
        public event UpdateExCompletedEventHandler UpdateExCompleted;
        
        /// <remarks/>
        public event SynchronizeExCompletedEventHandler SynchronizeExCompleted;
        
        /// <remarks/>
        public event GetLifeCycleNameCompletedEventHandler GetLifeCycleNameCompleted;
        
        /// <remarks/>
        public event GetPermissionsCompletedEventHandler GetPermissionsCompleted;
        
        /// <remarks/>
        public event GetItemInfoCompletedEventHandler GetItemInfoCompleted;
        
        /// <remarks/>
        public event AddDependsOnItemsCompletedEventHandler AddDependsOnItemsCompleted;
        
        /// <remarks/>
        public event AddSupportsItemsCompletedEventHandler AddSupportsItemsCompleted;
        
        /// <remarks/>
        public event GetDependsOnItemsCompletedEventHandler GetDependsOnItemsCompleted;
        
        /// <remarks/>
        public event GetSupportsItemsCompletedEventHandler GetSupportsItemsCompleted;
        
        /// <remarks/>
        public event RemoveDependsOnItemsCompletedEventHandler RemoveDependsOnItemsCompleted;
        
        /// <remarks/>
        public event RemoveSupportsItemsCompletedEventHandler RemoveSupportsItemsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/Debug", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psRETURN_VALUES Debug() {
            object[] results = this.Invoke("Debug", new object[0]);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebug(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Debug", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public psRETURN_VALUES EndDebug(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public void DebugAsync() {
            this.DebugAsync(null);
        }
        
        /// <remarks/>
        public void DebugAsync(object userState) {
            if ((this.DebugOperationCompleted == null)) {
                this.DebugOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebugOperationCompleted);
            }
            this.InvokeAsync("Debug", new object[0], this.DebugOperationCompleted, userState);
        }
        
        private void OnDebugOperationCompleted(object arg) {
            if ((this.DebugCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebugCompleted(this, new DebugCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/Delete", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(string sCommonIDCategory, string sId) {
            this.Invoke("Delete", new object[] {
                        sCommonIDCategory,
                        sId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDelete(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAsync(string sCommonIDCategory, string sId) {
            this.DeleteAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        sCommonIDCategory,
                        sId}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/SetCurrentPhase", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCurrentPhase(string sCommonIDCategory, string sId, string sPhaseName) {
            this.Invoke("SetCurrentPhase", new object[] {
                        sCommonIDCategory,
                        sId,
                        sPhaseName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetCurrentPhase(string sCommonIDCategory, string sId, string sPhaseName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetCurrentPhase", new object[] {
                        sCommonIDCategory,
                        sId,
                        sPhaseName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetCurrentPhase(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetCurrentPhaseAsync(string sCommonIDCategory, string sId, string sPhaseName) {
            this.SetCurrentPhaseAsync(sCommonIDCategory, sId, sPhaseName, null);
        }
        
        /// <remarks/>
        public void SetCurrentPhaseAsync(string sCommonIDCategory, string sId, string sPhaseName, object userState) {
            if ((this.SetCurrentPhaseOperationCompleted == null)) {
                this.SetCurrentPhaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCurrentPhaseOperationCompleted);
            }
            this.InvokeAsync("SetCurrentPhase", new object[] {
                        sCommonIDCategory,
                        sId,
                        sPhaseName}, this.SetCurrentPhaseOperationCompleted, userState);
        }
        
        private void OnSetCurrentPhaseOperationCompleted(object arg) {
            if ((this.SetCurrentPhaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCurrentPhaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/SetCommonId", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCommonId(int iPSID, string sCommonIDCategory, string sId) {
            this.Invoke("SetCommonId", new object[] {
                        iPSID,
                        sCommonIDCategory,
                        sId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetCommonId(int iPSID, string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetCommonId", new object[] {
                        iPSID,
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetCommonId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetCommonIdAsync(int iPSID, string sCommonIDCategory, string sId) {
            this.SetCommonIdAsync(iPSID, sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void SetCommonIdAsync(int iPSID, string sCommonIDCategory, string sId, object userState) {
            if ((this.SetCommonIdOperationCompleted == null)) {
                this.SetCommonIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCommonIdOperationCompleted);
            }
            this.InvokeAsync("SetCommonId", new object[] {
                        iPSID,
                        sCommonIDCategory,
                        sId}, this.SetCommonIdOperationCompleted, userState);
        }
        
        private void OnSetCommonIdOperationCompleted(object arg) {
            if ((this.SetCommonIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCommonIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/RemoveCommonId", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCommonId(string sCommonIDCategory, string sId) {
            this.Invoke("RemoveCommonId", new object[] {
                        sCommonIDCategory,
                        sId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCommonId(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCommonId", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveCommonId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveCommonIdAsync(string sCommonIDCategory, string sId) {
            this.RemoveCommonIdAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void RemoveCommonIdAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.RemoveCommonIdOperationCompleted == null)) {
                this.RemoveCommonIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCommonIdOperationCompleted);
            }
            this.InvokeAsync("RemoveCommonId", new object[] {
                        sCommonIDCategory,
                        sId}, this.RemoveCommonIdOperationCompleted, userState);
        }
        
        private void OnRemoveCommonIdOperationCompleted(object arg) {
            if ((this.RemoveCommonIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCommonIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/AddIDependOn", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddIDependOn(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("AddIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddIDependOn(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddIDependOn(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddIDependOnAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.AddIDependOnAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void AddIDependOnAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.AddIDependOnOperationCompleted == null)) {
                this.AddIDependOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIDependOnOperationCompleted);
            }
            this.InvokeAsync("AddIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.AddIDependOnOperationCompleted, userState);
        }
        
        private void OnAddIDependOnOperationCompleted(object arg) {
            if ((this.AddIDependOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIDependOnCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/AddDependantOnMe", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDependantOnMe(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("AddDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDependantOnMe(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDependantOnMe(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddDependantOnMeAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.AddDependantOnMeAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void AddDependantOnMeAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.AddDependantOnMeOperationCompleted == null)) {
                this.AddDependantOnMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDependantOnMeOperationCompleted);
            }
            this.InvokeAsync("AddDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.AddDependantOnMeOperationCompleted, userState);
        }
        
        private void OnAddDependantOnMeOperationCompleted(object arg) {
            if ((this.AddDependantOnMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDependantOnMeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetDependants", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosDependencyInfo[] GetDependants(string sCommonIDCategory, string sId) {
            object[] results = this.Invoke("GetDependants", new object[] {
                        sCommonIDCategory,
                        sId});
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDependants(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDependants", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] EndGetDependants(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDependantsAsync(string sCommonIDCategory, string sId) {
            this.GetDependantsAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void GetDependantsAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.GetDependantsOperationCompleted == null)) {
                this.GetDependantsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDependantsOperationCompleted);
            }
            this.InvokeAsync("GetDependants", new object[] {
                        sCommonIDCategory,
                        sId}, this.GetDependantsOperationCompleted, userState);
        }
        
        private void OnGetDependantsOperationCompleted(object arg) {
            if ((this.GetDependantsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDependantsCompleted(this, new GetDependantsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetDependantOnMe", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosDependencyInfo[] GetDependantOnMe(string sCommonIDCategory, string sId) {
            object[] results = this.Invoke("GetDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId});
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDependantOnMe(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] EndGetDependantOnMe(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDependantOnMeAsync(string sCommonIDCategory, string sId) {
            this.GetDependantOnMeAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void GetDependantOnMeAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.GetDependantOnMeOperationCompleted == null)) {
                this.GetDependantOnMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDependantOnMeOperationCompleted);
            }
            this.InvokeAsync("GetDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId}, this.GetDependantOnMeOperationCompleted, userState);
        }
        
        private void OnGetDependantOnMeOperationCompleted(object arg) {
            if ((this.GetDependantOnMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDependantOnMeCompleted(this, new GetDependantOnMeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/RemoveIDependOn", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveIDependOn(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("RemoveIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveIDependOn(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveIDependOn(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveIDependOnAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.RemoveIDependOnAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void RemoveIDependOnAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.RemoveIDependOnOperationCompleted == null)) {
                this.RemoveIDependOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIDependOnOperationCompleted);
            }
            this.InvokeAsync("RemoveIDependOn", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.RemoveIDependOnOperationCompleted, userState);
        }
        
        private void OnRemoveIDependOnOperationCompleted(object arg) {
            if ((this.RemoveIDependOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveIDependOnCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/RemoveDependantOnMe", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveDependantOnMe(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("RemoveDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveDependantOnMe(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveDependantOnMe(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveDependantOnMeAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.RemoveDependantOnMeAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void RemoveDependantOnMeAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.RemoveDependantOnMeOperationCompleted == null)) {
                this.RemoveDependantOnMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDependantOnMeOperationCompleted);
            }
            this.InvokeAsync("RemoveDependantOnMe", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.RemoveDependantOnMeOperationCompleted, userState);
        }
        
        private void OnRemoveDependantOnMeOperationCompleted(object arg) {
            if ((this.RemoveDependantOnMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDependantOnMeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetIDByName", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIDByName(string sCommonIDCategory, string sName) {
            object[] results = this.Invoke("GetIDByName", new object[] {
                        sCommonIDCategory,
                        sName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIDByName(string sCommonIDCategory, string sName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIDByName", new object[] {
                        sCommonIDCategory,
                        sName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetIDByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIDByNameAsync(string sCommonIDCategory, string sName) {
            this.GetIDByNameAsync(sCommonIDCategory, sName, null);
        }
        
        /// <remarks/>
        public void GetIDByNameAsync(string sCommonIDCategory, string sName, object userState) {
            if ((this.GetIDByNameOperationCompleted == null)) {
                this.GetIDByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDByNameOperationCompleted);
            }
            this.InvokeAsync("GetIDByName", new object[] {
                        sCommonIDCategory,
                        sName}, this.GetIDByNameOperationCompleted, userState);
        }
        
        private void OnGetIDByNameOperationCompleted(object arg) {
            if ((this.GetIDByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDByNameCompleted(this, new GetIDByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/AddNewEx", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId) {
            this.Invoke("AddNewEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddNewEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddNewEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddNewEx(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddNewExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId) {
            this.AddNewExAsync(sCommonIDCategory, sId, sName, sLifeCycle, sStartDate, sEndDate, sDescription, lStatus, sManager, sContainerId, null);
        }
        
        /// <remarks/>
        public void AddNewExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, object userState) {
            if ((this.AddNewExOperationCompleted == null)) {
                this.AddNewExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewExOperationCompleted);
            }
            this.InvokeAsync("AddNewEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId}, this.AddNewExOperationCompleted, userState);
        }
        
        private void OnAddNewExOperationCompleted(object arg) {
            if ((this.AddNewExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/UpdateEx", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, int lUpdateFlags) {
            this.Invoke("UpdateEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId,
                        lUpdateFlags});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, int lUpdateFlags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId,
                        lUpdateFlags}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateEx(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, int lUpdateFlags) {
            this.UpdateExAsync(sCommonIDCategory, sId, sName, sLifeCycle, sStartDate, sEndDate, sDescription, lStatus, sManager, sContainerId, lUpdateFlags, null);
        }
        
        /// <remarks/>
        public void UpdateExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, int lUpdateFlags, object userState) {
            if ((this.UpdateExOperationCompleted == null)) {
                this.UpdateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExOperationCompleted);
            }
            this.InvokeAsync("UpdateEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId,
                        lUpdateFlags}, this.UpdateExOperationCompleted, userState);
        }
        
        private void OnUpdateExOperationCompleted(object arg) {
            if ((this.UpdateExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/SynchronizeEx", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchronizeEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId) {
            this.Invoke("SynchronizeEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSynchronizeEx(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SynchronizeEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSynchronizeEx(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SynchronizeExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId) {
            this.SynchronizeExAsync(sCommonIDCategory, sId, sName, sLifeCycle, sStartDate, sEndDate, sDescription, lStatus, sManager, sContainerId, null);
        }
        
        /// <remarks/>
        public void SynchronizeExAsync(string sCommonIDCategory, string sId, string sName, string sLifeCycle, string sStartDate, string sEndDate, string sDescription, psOPEN_CLOSED_STATUS lStatus, string sManager, string sContainerId, object userState) {
            if ((this.SynchronizeExOperationCompleted == null)) {
                this.SynchronizeExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchronizeExOperationCompleted);
            }
            this.InvokeAsync("SynchronizeEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        sName,
                        sLifeCycle,
                        sStartDate,
                        sEndDate,
                        sDescription,
                        lStatus,
                        sManager,
                        sContainerId}, this.SynchronizeExOperationCompleted, userState);
        }
        
        private void OnSynchronizeExOperationCompleted(object arg) {
            if ((this.SynchronizeExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchronizeExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetLifeCycleName", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLifeCycleName(string sCommonIDCategory, string sId) {
            object[] results = this.Invoke("GetLifeCycleName", new object[] {
                        sCommonIDCategory,
                        sId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLifeCycleName(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLifeCycleName", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLifeCycleName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLifeCycleNameAsync(string sCommonIDCategory, string sId) {
            this.GetLifeCycleNameAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void GetLifeCycleNameAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.GetLifeCycleNameOperationCompleted == null)) {
                this.GetLifeCycleNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLifeCycleNameOperationCompleted);
            }
            this.InvokeAsync("GetLifeCycleName", new object[] {
                        sCommonIDCategory,
                        sId}, this.GetLifeCycleNameOperationCompleted, userState);
        }
        
        private void OnGetLifeCycleNameOperationCompleted(object arg) {
            if ((this.GetLifeCycleNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLifeCycleNameCompleted(this, new GetLifeCycleNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetPermissions", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPermissions(string sCommonIDCategory, string sId) {
            object[] results = this.Invoke("GetPermissions", new object[] {
                        sCommonIDCategory,
                        sId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPermissions(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPermissions", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetPermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionsAsync(string sCommonIDCategory, string sId) {
            this.GetPermissionsAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void GetPermissionsAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.GetPermissionsOperationCompleted == null)) {
                this.GetPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetPermissions", new object[] {
                        sCommonIDCategory,
                        sId}, this.GetPermissionsOperationCompleted, userState);
        }
        
        private void OnGetPermissionsOperationCompleted(object arg) {
            if ((this.GetPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionsCompleted(this, new GetPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetItemInfo", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosItemInfo GetItemInfo(string sCommonIDCategory, string sId) {
            object[] results = this.Invoke("GetItemInfo", new object[] {
                        sCommonIDCategory,
                        sId});
            return ((psPortfoliosItemInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetItemInfo(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetItemInfo", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosItemInfo EndGetItemInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosItemInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemInfoAsync(string sCommonIDCategory, string sId) {
            this.GetItemInfoAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void GetItemInfoAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.GetItemInfoOperationCompleted == null)) {
                this.GetItemInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemInfoOperationCompleted);
            }
            this.InvokeAsync("GetItemInfo", new object[] {
                        sCommonIDCategory,
                        sId}, this.GetItemInfoOperationCompleted, userState);
        }
        
        private void OnGetItemInfoOperationCompleted(object arg) {
            if ((this.GetItemInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemInfoCompleted(this, new GetItemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/AddDependsOnItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDependsOnItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("AddDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDependsOnItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDependsOnItems(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddDependsOnItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.AddDependsOnItemsAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void AddDependsOnItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.AddDependsOnItemsOperationCompleted == null)) {
                this.AddDependsOnItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDependsOnItemsOperationCompleted);
            }
            this.InvokeAsync("AddDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.AddDependsOnItemsOperationCompleted, userState);
        }
        
        private void OnAddDependsOnItemsOperationCompleted(object arg) {
            if ((this.AddDependsOnItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDependsOnItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/AddSupportsItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSupportsItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("AddSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSupportsItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddSupportsItems(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddSupportsItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.AddSupportsItemsAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void AddSupportsItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.AddSupportsItemsOperationCompleted == null)) {
                this.AddSupportsItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSupportsItemsOperationCompleted);
            }
            this.InvokeAsync("AddSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.AddSupportsItemsOperationCompleted, userState);
        }
        
        private void OnAddSupportsItemsOperationCompleted(object arg) {
            if ((this.AddSupportsItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSupportsItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetDependsOnItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosDependencyInfo[] GetDependsOnItems(string sCommonIDCategory, string sId, string sDependencyType) {
            object[] results = this.Invoke("GetDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType});
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDependsOnItems(string sCommonIDCategory, string sId, string sDependencyType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] EndGetDependsOnItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDependsOnItemsAsync(string sCommonIDCategory, string sId, string sDependencyType) {
            this.GetDependsOnItemsAsync(sCommonIDCategory, sId, sDependencyType, null);
        }
        
        /// <remarks/>
        public void GetDependsOnItemsAsync(string sCommonIDCategory, string sId, string sDependencyType, object userState) {
            if ((this.GetDependsOnItemsOperationCompleted == null)) {
                this.GetDependsOnItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDependsOnItemsOperationCompleted);
            }
            this.InvokeAsync("GetDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType}, this.GetDependsOnItemsOperationCompleted, userState);
        }
        
        private void OnGetDependsOnItemsOperationCompleted(object arg) {
            if ((this.GetDependsOnItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDependsOnItemsCompleted(this, new GetDependsOnItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/GetSupportsItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosDependencyInfo[] GetSupportsItems(string sCommonIDCategory, string sId, string sDependencyType) {
            object[] results = this.Invoke("GetSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType});
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportsItems(string sCommonIDCategory, string sId, string sDependencyType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] EndGetSupportsItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosDependencyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportsItemsAsync(string sCommonIDCategory, string sId, string sDependencyType) {
            this.GetSupportsItemsAsync(sCommonIDCategory, sId, sDependencyType, null);
        }
        
        /// <remarks/>
        public void GetSupportsItemsAsync(string sCommonIDCategory, string sId, string sDependencyType, object userState) {
            if ((this.GetSupportsItemsOperationCompleted == null)) {
                this.GetSupportsItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportsItemsOperationCompleted);
            }
            this.InvokeAsync("GetSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        sDependencyType}, this.GetSupportsItemsOperationCompleted, userState);
        }
        
        private void OnGetSupportsItemsOperationCompleted(object arg) {
            if ((this.GetSupportsItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportsItemsCompleted(this, new GetSupportsItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/RemoveDependsOnItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveDependsOnItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("RemoveDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveDependsOnItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveDependsOnItems(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveDependsOnItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.RemoveDependsOnItemsAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void RemoveDependsOnItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.RemoveDependsOnItemsOperationCompleted == null)) {
                this.RemoveDependsOnItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDependsOnItemsOperationCompleted);
            }
            this.InvokeAsync("RemoveDependsOnItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.RemoveDependsOnItemsOperationCompleted, userState);
        }
        
        private void OnRemoveDependsOnItemsOperationCompleted(object arg) {
            if ((this.RemoveDependsOnItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveDependsOnItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosItem/RemoveSupportsItems", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSupportsItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.Invoke("RemoveSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveSupportsItems(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveSupportsItems(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveSupportsItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList) {
            this.RemoveSupportsItemsAsync(sCommonIDCategory, sId, arDependencyList, null);
        }
        
        /// <remarks/>
        public void RemoveSupportsItemsAsync(string sCommonIDCategory, string sId, psPortfoliosDependencyInfo[] arDependencyList, object userState) {
            if ((this.RemoveSupportsItemsOperationCompleted == null)) {
                this.RemoveSupportsItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSupportsItemsOperationCompleted);
            }
            this.InvokeAsync("RemoveSupportsItems", new object[] {
                        sCommonIDCategory,
                        sId,
                        arDependencyList}, this.RemoveSupportsItemsOperationCompleted, userState);
        }
        
        private void OnRemoveSupportsItemsOperationCompleted(object arg) {
            if ((this.RemoveSupportsItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSupportsItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public enum psRETURN_VALUES {
        
        /// <remarks/>
        ERR_OK,
        
        /// <remarks/>
        ERR_INTERNAL,
        
        /// <remarks/>
        ERR_COMMON_ID_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_COMMON_ID_UNKNOWN,
        
        /// <remarks/>
        ERR_MULTIPLE_COMMON_ID,
        
        /// <remarks/>
        ERR_NOT_ITEM,
        
        /// <remarks/>
        ERR_NO_NAME_GIVEN,
        
        /// <remarks/>
        ERR_PORTFOLIO_UNKNOWN,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_QBP,
        
        /// <remarks/>
        ERR_NAME_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_NOT_PORTFOLIO,
        
        /// <remarks/>
        ERR_PORTFOLIO_TYPE_MISMATCH,
        
        /// <remarks/>
        ERR_PHASE_NOT_FOUND,
        
        /// <remarks/>
        ERR_NO_SUCH_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_NO_COMMON_ID,
        
        /// <remarks/>
        ERR_ILLEGAL_STATUS,
        
        /// <remarks/>
        ERR_ILLEGAL_PORTFOLIO_TYPE,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_NOT_FOUND,
        
        /// <remarks/>
        ERR_ILLEGAL_GUID,
        
        /// <remarks/>
        ERR_NO_PHASES_FOR_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_ILLEGAL_DATE,
        
        /// <remarks/>
        ERR_ILLEGAL_DESCRIPTION,
        
        /// <remarks/>
        ERR_ITEM_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_NO_VALUE_LIST_NAME,
        
        /// <remarks/>
        ERR_VALUE_LIST_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_CANNOT_UPDATE_SYSTEM_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_TEXT_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_ID_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_VALUE_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_VALUE_ID_NOT_INTEGER,
        
        /// <remarks/>
        ERR_ILLEGAL_NAME,
        
        /// <remarks/>
        ERR_CATEGORY_NOT_SUPPORTED,
        
        /// <remarks/>
        ERR_CATEGORY_UNKNOWN,
        
        /// <remarks/>
        ERR_ILLEGAL_OPERATOR,
        
        /// <remarks/>
        ERR_VALUE_NOT_INTEGER,
        
        /// <remarks/>
        ERR_VALUE_NOT_NUMERIC,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_IN_SCOPE,
        
        /// <remarks/>
        ERR_ILLEGAL_INDICATOR,
        
        /// <remarks/>
        ERR_BAD_PARAMETER,
        
        /// <remarks/>
        ERR_ILLEGAL_DEPENDENCY,
        
        /// <remarks/>
        ERR_ADD_NEW_NEVER_CALLED,
        
        /// <remarks/>
        ERR_SECURITY_NOT_SET,
        
        /// <remarks/>
        ERR_SECURITY_VIOLATION,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_IN_PORTFOLIO,
        
        /// <remarks/>
        ERR_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_NO_DELETE_PERMISSION,
        
        /// <remarks/>
        ERR_NO_EDIT_PERMISSION_ON_PARENT,
        
        /// <remarks/>
        ERR_NO_FURTHER_DETAILS_AVAILABLE,
        
        /// <remarks/>
        ERR_DUPLICATE_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_PHASE_ACTUAL_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_PHASE_PLANED_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_MORE_THAN_ONE_CURRENT_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_MENU_XML_DOES_NOT_CONFORM_TO_XSD,
        
        /// <remarks/>
        ERR_SETTINGS_DO_NOT_EXIST,
        
        /// <remarks/>
        ERR_SETTINGS_ALREADY_EXIST,
        
        /// <remarks/>
        ERR_OBJECT_IN_USE,
        
        /// <remarks/>
        ERR_EXCEEDED_AUTHORIZED_NUMBER_OF_USERS,
        
        /// <remarks/>
        ERR_PHASE_FRCST_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_SPECIFIC_EMAIL_ALERT_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_XML_EXPORT_TEMPLATE_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_VALIDATION_ERROR,
        
        /// <remarks/>
        ERR_VERSION_NAME_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_ATTACHMENT_UNKNOWN,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public partial class psPortfoliosDependencyInfo {
        
        private int proSightIDField;
        
        private string nameField;
        
        private string uCIField;
        
        private psPORTFOLIO_TYPE portfolioTypeField;
        
        private string descriptionField;
        
        private string dependencyTypeField;
        
        private string weightField;
        
        private float costField;
        
        public psPortfoliosDependencyInfo() {
            this.portfolioTypeField = psPORTFOLIO_TYPE.NOT_SPECIFIED;
            this.costField = ((float)(-1E+38F));
        }
        
        /// <remarks/>
        public int ProSightID {
            get {
                return this.proSightIDField;
            }
            set {
                this.proSightIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string UCI {
            get {
                return this.uCIField;
            }
            set {
                this.uCIField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psPORTFOLIO_TYPE.NOT_SPECIFIED)]
        public psPORTFOLIO_TYPE PortfolioType {
            get {
                return this.portfolioTypeField;
            }
            set {
                this.portfolioTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string DependencyType {
            get {
                return this.dependencyTypeField;
            }
            set {
                this.dependencyTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(typeof(float), "-1E+38")]
        public float Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public enum psPORTFOLIO_TYPE {
        
        /// <remarks/>
        PTYP_NONE,
        
        /// <remarks/>
        PTYP_ITEM,
        
        /// <remarks/>
        PTYP_PROJECTS,
        
        /// <remarks/>
        PTYP_PORTFOLIOS,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public partial class psPortfoliosItemInfo {
        
        private int proSightIDField;
        
        private string nameField;
        
        private string uCIField;
        
        private psPORTFOLIO_TYPE portfolioTypeField;
        
        private string lifeCycleField;
        
        private string startDateField;
        
        private string endDateField;
        
        private string descriptionField;
        
        private psOPEN_CLOSED_STATUS statusField;
        
        private string managerField;
        
        private string containerUCIField;
        
        private int containerProSightIDField;
        
        private bool isContainerRootField;
        
        private psCALCULATION_LEVEL calculationLevelField;
        
        public psPortfoliosItemInfo() {
            this.proSightIDField = -2;
            this.portfolioTypeField = psPORTFOLIO_TYPE.NOT_SPECIFIED;
            this.statusField = psOPEN_CLOSED_STATUS.NOT_SPECIFIED;
            this.containerProSightIDField = -2;
            this.calculationLevelField = psCALCULATION_LEVEL.NOT_SPECIFIED;
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-2)]
        public int ProSightID {
            get {
                return this.proSightIDField;
            }
            set {
                this.proSightIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string UCI {
            get {
                return this.uCIField;
            }
            set {
                this.uCIField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psPORTFOLIO_TYPE.NOT_SPECIFIED)]
        public psPORTFOLIO_TYPE PortfolioType {
            get {
                return this.portfolioTypeField;
            }
            set {
                this.portfolioTypeField = value;
            }
        }
        
        /// <remarks/>
        public string LifeCycle {
            get {
                return this.lifeCycleField;
            }
            set {
                this.lifeCycleField = value;
            }
        }
        
        /// <remarks/>
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psOPEN_CLOSED_STATUS.NOT_SPECIFIED)]
        public psOPEN_CLOSED_STATUS Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Manager {
            get {
                return this.managerField;
            }
            set {
                this.managerField = value;
            }
        }
        
        /// <remarks/>
        public string ContainerUCI {
            get {
                return this.containerUCIField;
            }
            set {
                this.containerUCIField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-2)]
        public int ContainerProSightID {
            get {
                return this.containerProSightIDField;
            }
            set {
                this.containerProSightIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsContainerRoot {
            get {
                return this.isContainerRootField;
            }
            set {
                this.isContainerRootField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psCALCULATION_LEVEL.NOT_SPECIFIED)]
        public psCALCULATION_LEVEL CalculationLevel {
            get {
                return this.calculationLevelField;
            }
            set {
                this.calculationLevelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public enum psOPEN_CLOSED_STATUS {
        
        /// <remarks/>
        OCSTS_NONE,
        
        /// <remarks/>
        OCSTS_OPEN,
        
        /// <remarks/>
        OCSTS_CLOSED,
        
        /// <remarks/>
        OCSTS_CANDIDATE,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosItem")]
    public enum psCALCULATION_LEVEL {
        
        /// <remarks/>
        CL_NONE,
        
        /// <remarks/>
        CL_CALCULATED,
        
        /// <remarks/>
        CL_NOT_CALCULATED,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DebugCompletedEventHandler(object sender, DebugCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psRETURN_VALUES Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psRETURN_VALUES)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void SetCurrentPhaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void SetCommonIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void RemoveCommonIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddIDependOnCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddDependantOnMeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetDependantsCompletedEventHandler(object sender, GetDependantsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDependantsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDependantsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosDependencyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetDependantOnMeCompletedEventHandler(object sender, GetDependantOnMeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDependantOnMeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDependantOnMeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosDependencyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void RemoveIDependOnCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void RemoveDependantOnMeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetIDByNameCompletedEventHandler(object sender, GetIDByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIDByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddNewExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void SynchronizeExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetLifeCycleNameCompletedEventHandler(object sender, GetLifeCycleNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLifeCycleNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLifeCycleNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetPermissionsCompletedEventHandler(object sender, GetPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetItemInfoCompletedEventHandler(object sender, GetItemInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosItemInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosItemInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddDependsOnItemsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddSupportsItemsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetDependsOnItemsCompletedEventHandler(object sender, GetDependsOnItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDependsOnItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDependsOnItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosDependencyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetSupportsItemsCompletedEventHandler(object sender, GetSupportsItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportsItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportsItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosDependencyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosDependencyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void RemoveDependsOnItemsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void RemoveSupportsItemsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
