//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 
namespace wsPortfoliosStartWFAlert {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="psPortfoliosStartWFAlertSoap", Namespace="http://prosight.com/wsdl/5.0/psPortfoliosStartWFAlert/")]
    public partial class psPortfoliosStartWFAlert : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DebugOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddItemAddedAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCategoryChangedAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPhaseModifiedAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDeliverableModifiedAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActionItemModifiedAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMultipleCategoryAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAlertOperationCompleted;
        
        /// <remarks/>
        public psPortfoliosStartWFAlert() {
            this.Url = "http://localhost/ProSightWs/psPortfoliosStartWFAlert.asmx";
        }
        
        /// <remarks/>
        public event DebugCompletedEventHandler DebugCompleted;
        
        /// <remarks/>
        public event AddItemAddedAlertCompletedEventHandler AddItemAddedAlertCompleted;
        
        /// <remarks/>
        public event AddCategoryChangedAlertCompletedEventHandler AddCategoryChangedAlertCompleted;
        
        /// <remarks/>
        public event AddPhaseModifiedAlertCompletedEventHandler AddPhaseModifiedAlertCompleted;
        
        /// <remarks/>
        public event AddDeliverableModifiedAlertCompletedEventHandler AddDeliverableModifiedAlertCompleted;
        
        /// <remarks/>
        public event AddActionItemModifiedAlertCompletedEventHandler AddActionItemModifiedAlertCompleted;
        
        /// <remarks/>
        public event AddMultipleCategoryAlertCompletedEventHandler AddMultipleCategoryAlertCompleted;
        
        /// <remarks/>
        public event EnableAlertCompletedEventHandler EnableAlertCompleted;
        
        /// <remarks/>
        public event DisableAlertCompletedEventHandler DisableAlertCompleted;
        
        /// <remarks/>
        public event DeleteAlertCompletedEventHandler DeleteAlertCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/Debug", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psRETURN_VALUES Debug() {
            object[] results = this.Invoke("Debug", new object[0]);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebug(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Debug", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public psRETURN_VALUES EndDebug(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public void DebugAsync() {
            this.DebugAsync(null);
        }
        
        /// <remarks/>
        public void DebugAsync(object userState) {
            if ((this.DebugOperationCompleted == null)) {
                this.DebugOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebugOperationCompleted);
            }
            this.InvokeAsync("Debug", new object[0], this.DebugOperationCompleted, userState);
        }
        
        private void OnDebugOperationCompleted(object arg) {
            if ((this.DebugCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebugCompleted(this, new DebugCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddItemAddedAler" +
            "t", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddItemAddedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, bool bOnlyForNewlyCreated, string sContainerName) {
            object[] results = this.Invoke("AddItemAddedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        bOnlyForNewlyCreated,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddItemAddedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, bool bOnlyForNewlyCreated, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddItemAddedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        bOnlyForNewlyCreated,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddItemAddedAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddItemAddedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, bool bOnlyForNewlyCreated, string sContainerName) {
            this.AddItemAddedAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, bOnlyForNewlyCreated, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddItemAddedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, bool bOnlyForNewlyCreated, string sContainerName, object userState) {
            if ((this.AddItemAddedAlertOperationCompleted == null)) {
                this.AddItemAddedAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddItemAddedAlertOperationCompleted);
            }
            this.InvokeAsync("AddItemAddedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        bOnlyForNewlyCreated,
                        sContainerName}, this.AddItemAddedAlertOperationCompleted, userState);
        }
        
        private void OnAddItemAddedAlertOperationCompleted(object arg) {
            if ((this.AddItemAddedAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddItemAddedAlertCompleted(this, new AddItemAddedAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddCategoryChang" +
            "edAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddCategoryChangedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart transition, string sContainerName) {
            object[] results = this.Invoke("AddCategoryChangedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        transition,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCategoryChangedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart transition, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCategoryChangedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        transition,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddCategoryChangedAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCategoryChangedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart transition, string sContainerName) {
            this.AddCategoryChangedAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, transition, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddCategoryChangedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart transition, string sContainerName, object userState) {
            if ((this.AddCategoryChangedAlertOperationCompleted == null)) {
                this.AddCategoryChangedAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCategoryChangedAlertOperationCompleted);
            }
            this.InvokeAsync("AddCategoryChangedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        transition,
                        sContainerName}, this.AddCategoryChangedAlertOperationCompleted, userState);
        }
        
        private void OnAddCategoryChangedAlertOperationCompleted(object arg) {
            if ((this.AddCategoryChangedAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCategoryChangedAlertCompleted(this, new AddCategoryChangedAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddPhaseModified" +
            "Alert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPhaseModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            object[] results = this.Invoke("AddPhaseModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPhaseModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPhaseModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddPhaseModifiedAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPhaseModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            this.AddPhaseModifiedAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddPhaseModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, object userState) {
            if ((this.AddPhaseModifiedAlertOperationCompleted == null)) {
                this.AddPhaseModifiedAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPhaseModifiedAlertOperationCompleted);
            }
            this.InvokeAsync("AddPhaseModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, this.AddPhaseModifiedAlertOperationCompleted, userState);
        }
        
        private void OnAddPhaseModifiedAlertOperationCompleted(object arg) {
            if ((this.AddPhaseModifiedAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPhaseModifiedAlertCompleted(this, new AddPhaseModifiedAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddDeliverableMo" +
            "difiedAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddDeliverableModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            object[] results = this.Invoke("AddDeliverableModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDeliverableModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDeliverableModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddDeliverableModifiedAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddDeliverableModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            this.AddDeliverableModifiedAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddDeliverableModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, object userState) {
            if ((this.AddDeliverableModifiedAlertOperationCompleted == null)) {
                this.AddDeliverableModifiedAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDeliverableModifiedAlertOperationCompleted);
            }
            this.InvokeAsync("AddDeliverableModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, this.AddDeliverableModifiedAlertOperationCompleted, userState);
        }
        
        private void OnAddDeliverableModifiedAlertOperationCompleted(object arg) {
            if ((this.AddDeliverableModifiedAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDeliverableModifiedAlertCompleted(this, new AddDeliverableModifiedAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddActionItemMod" +
            "ifiedAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddActionItemModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            object[] results = this.Invoke("AddActionItemModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddActionItemModifiedAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddActionItemModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddActionItemModifiedAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddActionItemModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName) {
            this.AddActionItemModifiedAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddActionItemModifiedAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, string sContainerName, object userState) {
            if ((this.AddActionItemModifiedAlertOperationCompleted == null)) {
                this.AddActionItemModifiedAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActionItemModifiedAlertOperationCompleted);
            }
            this.InvokeAsync("AddActionItemModifiedAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        sContainerName}, this.AddActionItemModifiedAlertOperationCompleted, userState);
        }
        
        private void OnAddActionItemModifiedAlertOperationCompleted(object arg) {
            if ((this.AddActionItemModifiedAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActionItemModifiedAlertCompleted(this, new AddActionItemModifiedAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/AddMultipleCateg" +
            "oryAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMultipleCategoryAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart[] arCondition, string sContainerName) {
            object[] results = this.Invoke("AddMultipleCategoryAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        arCondition,
                        sContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddMultipleCategoryAlert(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart[] arCondition, string sContainerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddMultipleCategoryAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        arCondition,
                        sContainerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddMultipleCategoryAlert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMultipleCategoryAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart[] arCondition, string sContainerName) {
            this.AddMultipleCategoryAlertAsync(generalAlertInfo, scopeInfo, wfStartInfo, arCondition, sContainerName, null);
        }
        
        /// <remarks/>
        public void AddMultipleCategoryAlertAsync(psPortfoliosGeneralAlertInfo generalAlertInfo, psPortfoliosAlertScopeInfo scopeInfo, psPortfoliosAlertWFStartInfo wfStartInfo, psPortfoliosQueryPart[] arCondition, string sContainerName, object userState) {
            if ((this.AddMultipleCategoryAlertOperationCompleted == null)) {
                this.AddMultipleCategoryAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMultipleCategoryAlertOperationCompleted);
            }
            this.InvokeAsync("AddMultipleCategoryAlert", new object[] {
                        generalAlertInfo,
                        scopeInfo,
                        wfStartInfo,
                        arCondition,
                        sContainerName}, this.AddMultipleCategoryAlertOperationCompleted, userState);
        }
        
        private void OnAddMultipleCategoryAlertOperationCompleted(object arg) {
            if ((this.AddMultipleCategoryAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMultipleCategoryAlertCompleted(this, new AddMultipleCategoryAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/EnableAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableAlert(string sAlertName, string sAlertID) {
            this.Invoke("EnableAlert", new object[] {
                        sAlertName,
                        sAlertID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableAlert(string sAlertName, string sAlertID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableAlert", new object[] {
                        sAlertName,
                        sAlertID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEnableAlert(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EnableAlertAsync(string sAlertName, string sAlertID) {
            this.EnableAlertAsync(sAlertName, sAlertID, null);
        }
        
        /// <remarks/>
        public void EnableAlertAsync(string sAlertName, string sAlertID, object userState) {
            if ((this.EnableAlertOperationCompleted == null)) {
                this.EnableAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableAlertOperationCompleted);
            }
            this.InvokeAsync("EnableAlert", new object[] {
                        sAlertName,
                        sAlertID}, this.EnableAlertOperationCompleted, userState);
        }
        
        private void OnEnableAlertOperationCompleted(object arg) {
            if ((this.EnableAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/DisableAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableAlert(string sAlertName, string sAlertID) {
            this.Invoke("DisableAlert", new object[] {
                        sAlertName,
                        sAlertID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableAlert(string sAlertName, string sAlertID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableAlert", new object[] {
                        sAlertName,
                        sAlertID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisableAlert(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisableAlertAsync(string sAlertName, string sAlertID) {
            this.DisableAlertAsync(sAlertName, sAlertID, null);
        }
        
        /// <remarks/>
        public void DisableAlertAsync(string sAlertName, string sAlertID, object userState) {
            if ((this.DisableAlertOperationCompleted == null)) {
                this.DisableAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableAlertOperationCompleted);
            }
            this.InvokeAsync("DisableAlert", new object[] {
                        sAlertName,
                        sAlertID}, this.DisableAlertOperationCompleted, userState);
        }
        
        private void OnDisableAlertOperationCompleted(object arg) {
            if ((this.DisableAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosStartWFAlert/DeleteAlert", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAlert(string sAlertName, string sAlertID) {
            this.Invoke("DeleteAlert", new object[] {
                        sAlertName,
                        sAlertID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAlert(string sAlertName, string sAlertID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAlert", new object[] {
                        sAlertName,
                        sAlertID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAlert(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAlertAsync(string sAlertName, string sAlertID) {
            this.DeleteAlertAsync(sAlertName, sAlertID, null);
        }
        
        /// <remarks/>
        public void DeleteAlertAsync(string sAlertName, string sAlertID, object userState) {
            if ((this.DeleteAlertOperationCompleted == null)) {
                this.DeleteAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAlertOperationCompleted);
            }
            this.InvokeAsync("DeleteAlert", new object[] {
                        sAlertName,
                        sAlertID}, this.DeleteAlertOperationCompleted, userState);
        }
        
        private void OnDeleteAlertOperationCompleted(object arg) {
            if ((this.DeleteAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psRETURN_VALUES {
        
        /// <remarks/>
        ERR_OK,
        
        /// <remarks/>
        ERR_INTERNAL,
        
        /// <remarks/>
        ERR_COMMON_ID_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_COMMON_ID_UNKNOWN,
        
        /// <remarks/>
        ERR_MULTIPLE_COMMON_ID,
        
        /// <remarks/>
        ERR_NOT_ITEM,
        
        /// <remarks/>
        ERR_NO_NAME_GIVEN,
        
        /// <remarks/>
        ERR_PORTFOLIO_UNKNOWN,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_QBP,
        
        /// <remarks/>
        ERR_NAME_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_NOT_PORTFOLIO,
        
        /// <remarks/>
        ERR_PORTFOLIO_TYPE_MISMATCH,
        
        /// <remarks/>
        ERR_PHASE_NOT_FOUND,
        
        /// <remarks/>
        ERR_NO_SUCH_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_NO_COMMON_ID,
        
        /// <remarks/>
        ERR_ILLEGAL_STATUS,
        
        /// <remarks/>
        ERR_ILLEGAL_PORTFOLIO_TYPE,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_NOT_FOUND,
        
        /// <remarks/>
        ERR_ILLEGAL_GUID,
        
        /// <remarks/>
        ERR_NO_PHASES_FOR_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_ILLEGAL_DATE,
        
        /// <remarks/>
        ERR_ILLEGAL_DESCRIPTION,
        
        /// <remarks/>
        ERR_ITEM_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_NO_VALUE_LIST_NAME,
        
        /// <remarks/>
        ERR_VALUE_LIST_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_CANNOT_UPDATE_SYSTEM_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_TEXT_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_ID_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_VALUE_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_VALUE_ID_NOT_INTEGER,
        
        /// <remarks/>
        ERR_ILLEGAL_NAME,
        
        /// <remarks/>
        ERR_CATEGORY_NOT_SUPPORTED,
        
        /// <remarks/>
        ERR_CATEGORY_UNKNOWN,
        
        /// <remarks/>
        ERR_ILLEGAL_OPERATOR,
        
        /// <remarks/>
        ERR_VALUE_NOT_INTEGER,
        
        /// <remarks/>
        ERR_VALUE_NOT_NUMERIC,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_IN_SCOPE,
        
        /// <remarks/>
        ERR_ILLEGAL_INDICATOR,
        
        /// <remarks/>
        ERR_BAD_PARAMETER,
        
        /// <remarks/>
        ERR_ILLEGAL_DEPENDENCY,
        
        /// <remarks/>
        ERR_ADD_NEW_NEVER_CALLED,
        
        /// <remarks/>
        ERR_SECURITY_NOT_SET,
        
        /// <remarks/>
        ERR_SECURITY_VIOLATION,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_IN_PORTFOLIO,
        
        /// <remarks/>
        ERR_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_NO_DELETE_PERMISSION,
        
        /// <remarks/>
        ERR_NO_EDIT_PERMISSION_ON_PARENT,
        
        /// <remarks/>
        ERR_NO_FURTHER_DETAILS_AVAILABLE,
        
        /// <remarks/>
        ERR_DUPLICATE_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_PHASE_ACTUAL_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_PHASE_PLANED_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_MORE_THAN_ONE_CURRENT_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_MENU_XML_DOES_NOT_CONFORM_TO_XSD,
        
        /// <remarks/>
        ERR_SETTINGS_DO_NOT_EXIST,
        
        /// <remarks/>
        ERR_SETTINGS_ALREADY_EXIST,
        
        /// <remarks/>
        ERR_OBJECT_IN_USE,
        
        /// <remarks/>
        ERR_EXCEEDED_AUTHORIZED_NUMBER_OF_USERS,
        
        /// <remarks/>
        ERR_PHASE_FRCST_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_SPECIFIC_EMAIL_ALERT_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_XML_EXPORT_TEMPLATE_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_VALIDATION_ERROR,
        
        /// <remarks/>
        ERR_VERSION_NAME_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_ATTACHMENT_UNKNOWN,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public partial class psPortfoliosGeneralAlertInfo {
        
        private string nameField;
        
        private string descriptionField;
        
        private string ownerField;
        
        private int ownerIDField;
        
        private bool isEnabledField;
        
        private string expirationTimeField;
        
        public psPortfoliosGeneralAlertInfo() {
            this.ownerIDField = 0;
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int OwnerID {
            get {
                return this.ownerIDField;
            }
            set {
                this.ownerIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                this.isEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string ExpirationTime {
            get {
                return this.expirationTimeField;
            }
            set {
                this.expirationTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public partial class psPortfoliosQueryPart {
        
        private string categoryNameField;
        
        private psCELL_PART cellPartField;
        
        private psOPERATOR operatorField;
        
        private string compareValueField;
        
        private string compareDisplayValueField;
        
        private psQUERY_ROW_TYPE rowTypeField;
        
        private psLOGICAL_OPERATOR logicalOperatorField;
        
        public psPortfoliosQueryPart() {
            this.cellPartField = psCELL_PART.NOT_SPECIFIED;
            this.operatorField = psOPERATOR.NOT_SPECIFIED;
            this.rowTypeField = psQUERY_ROW_TYPE.NOT_SPECIFIED;
            this.logicalOperatorField = psLOGICAL_OPERATOR.NOT_SPECIFIED;
        }
        
        /// <remarks/>
        public string CategoryName {
            get {
                return this.categoryNameField;
            }
            set {
                this.categoryNameField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psCELL_PART.NOT_SPECIFIED)]
        public psCELL_PART CellPart {
            get {
                return this.cellPartField;
            }
            set {
                this.cellPartField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psOPERATOR.NOT_SPECIFIED)]
        public psOPERATOR Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        public string CompareValue {
            get {
                return this.compareValueField;
            }
            set {
                this.compareValueField = value;
            }
        }
        
        /// <remarks/>
        public string CompareDisplayValue {
            get {
                return this.compareDisplayValueField;
            }
            set {
                this.compareDisplayValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psQUERY_ROW_TYPE.NOT_SPECIFIED)]
        public psQUERY_ROW_TYPE RowType {
            get {
                return this.rowTypeField;
            }
            set {
                this.rowTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psLOGICAL_OPERATOR.NOT_SPECIFIED)]
        public psLOGICAL_OPERATOR LogicalOperator {
            get {
                return this.logicalOperatorField;
            }
            set {
                this.logicalOperatorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psCELL_PART {
        
        /// <remarks/>
        CPRT_NONE,
        
        /// <remarks/>
        CPRT_VALUE,
        
        /// <remarks/>
        CPRT_INDICATOR,
        
        /// <remarks/>
        CPRT_INDICATOR_COLOR,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psOPERATOR {
        
        /// <remarks/>
        OP_NONE,
        
        /// <remarks/>
        OP_HAS_VALUE,
        
        /// <remarks/>
        OP_NO_VALUE,
        
        /// <remarks/>
        OP_EQUAL,
        
        /// <remarks/>
        OP_NOT_EQUAL,
        
        /// <remarks/>
        OP_GREATER_THAN,
        
        /// <remarks/>
        OP_LESS_THAN,
        
        /// <remarks/>
        OP_GREATER_THAN_OR_EQUAL,
        
        /// <remarks/>
        OP_LESS_THAN_OR_EQUAL,
        
        /// <remarks/>
        OP_CONTAIN,
        
        /// <remarks/>
        OP_NOT_CONTAIN,
        
        /// <remarks/>
        OP_BEGINS_WITH,
        
        /// <remarks/>
        OP_ENDS_WITH,
        
        /// <remarks/>
        OP_ANY_CHANGE,
        
        /// <remarks/>
        OP_INCREASE,
        
        /// <remarks/>
        OP_DECREASE,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psQUERY_ROW_TYPE {
        
        /// <remarks/>
        QRT_NONE,
        
        /// <remarks/>
        QRT_CATEGORY,
        
        /// <remarks/>
        QRT_LOGICAL_OPERATOR_ONLY,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psLOGICAL_OPERATOR {
        
        /// <remarks/>
        LO_NONE,
        
        /// <remarks/>
        LO_AND,
        
        /// <remarks/>
        LO_OR,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public partial class psPortfoliosAlertWFStartInfo {
        
        private string wFTemplateNameField;
        
        private string wFInstanceNameField;
        
        private bool isWFScopeDefinedByWorkflowField;
        
        private bool isManagerDefinedByWorkflowField;
        
        private psWF_PARTICIPANT_TYPE managerTypeField;
        
        private string managerLoginField;
        
        private int managerIDField;
        
        private string managerRoleCategoryNameField;
        
        private bool isWFPermissionDefinedByWorkflowField;
        
        public psPortfoliosAlertWFStartInfo() {
            this.managerTypeField = psWF_PARTICIPANT_TYPE.NOT_SPECIFIED;
            this.managerIDField = 0;
        }
        
        /// <remarks/>
        public string WFTemplateName {
            get {
                return this.wFTemplateNameField;
            }
            set {
                this.wFTemplateNameField = value;
            }
        }
        
        /// <remarks/>
        public string WFInstanceName {
            get {
                return this.wFInstanceNameField;
            }
            set {
                this.wFInstanceNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsWFScopeDefinedByWorkflow {
            get {
                return this.isWFScopeDefinedByWorkflowField;
            }
            set {
                this.isWFScopeDefinedByWorkflowField = value;
            }
        }
        
        /// <remarks/>
        public bool IsManagerDefinedByWorkflow {
            get {
                return this.isManagerDefinedByWorkflowField;
            }
            set {
                this.isManagerDefinedByWorkflowField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psWF_PARTICIPANT_TYPE.NOT_SPECIFIED)]
        public psWF_PARTICIPANT_TYPE ManagerType {
            get {
                return this.managerTypeField;
            }
            set {
                this.managerTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ManagerLogin {
            get {
                return this.managerLoginField;
            }
            set {
                this.managerLoginField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int ManagerID {
            get {
                return this.managerIDField;
            }
            set {
                this.managerIDField = value;
            }
        }
        
        /// <remarks/>
        public string ManagerRoleCategoryName {
            get {
                return this.managerRoleCategoryNameField;
            }
            set {
                this.managerRoleCategoryNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsWFPermissionDefinedByWorkflow {
            get {
                return this.isWFPermissionDefinedByWorkflowField;
            }
            set {
                this.isWFPermissionDefinedByWorkflowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psWF_PARTICIPANT_TYPE {
        
        /// <remarks/>
        WPT_NONE,
        
        /// <remarks/>
        WPT_USER,
        
        /// <remarks/>
        WPT_ROLE,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public partial class psPortfoliosAlertScopeInfo {
        
        private psALERT_SCOPE_TYPE scopeTypeField;
        
        private string commonIDCategoryField;
        
        private string scopeItemIDField;
        
        private string scopeItemNameField;
        
        private string phaseNameField;
        
        private string deliverableNameField;
        
        public psPortfoliosAlertScopeInfo() {
            this.scopeTypeField = psALERT_SCOPE_TYPE.NOT_SPECIFIED;
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psALERT_SCOPE_TYPE.NOT_SPECIFIED)]
        public psALERT_SCOPE_TYPE ScopeType {
            get {
                return this.scopeTypeField;
            }
            set {
                this.scopeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CommonIDCategory {
            get {
                return this.commonIDCategoryField;
            }
            set {
                this.commonIDCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string ScopeItemID {
            get {
                return this.scopeItemIDField;
            }
            set {
                this.scopeItemIDField = value;
            }
        }
        
        /// <remarks/>
        public string ScopeItemName {
            get {
                return this.scopeItemNameField;
            }
            set {
                this.scopeItemNameField = value;
            }
        }
        
        /// <remarks/>
        public string PhaseName {
            get {
                return this.phaseNameField;
            }
            set {
                this.phaseNameField = value;
            }
        }
        
        /// <remarks/>
        public string DeliverableName {
            get {
                return this.deliverableNameField;
            }
            set {
                this.deliverableNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosStartWFAlert")]
    public enum psALERT_SCOPE_TYPE {
        
        /// <remarks/>
        AST_NONE,
        
        /// <remarks/>
        AST_ALL_ITEMS_AND_PORTFOLIOS,
        
        /// <remarks/>
        AST_ALL_PORTFOLIOS,
        
        /// <remarks/>
        AST_ALL_ITEMS,
        
        /// <remarks/>
        AST_ALL_ITEMS_AND_PORTFOLIOS_IN_ROOT,
        
        /// <remarks/>
        AST_SELECTED_ITEM_OR_PORTFOLIO,
        
        /// <remarks/>
        AST_ALL_ITEMS_IN_SELECTED_PORTFOLIO,
        
        /// <remarks/>
        AST_ALL_ITEMS_IN_SELECTED_HIERARCHY,
        
        /// <remarks/>
        AST_ALL_PORTFOLIOS_IN_SELECTED_HIERARCHY,
        
        /// <remarks/>
        AST_SPECIFIC_PHASE,
        
        /// <remarks/>
        AST_SPECIFIC_DELIVERABLE,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DebugCompletedEventHandler(object sender, DebugCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psRETURN_VALUES Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psRETURN_VALUES)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddItemAddedAlertCompletedEventHandler(object sender, AddItemAddedAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddItemAddedAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddItemAddedAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddCategoryChangedAlertCompletedEventHandler(object sender, AddCategoryChangedAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCategoryChangedAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCategoryChangedAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddPhaseModifiedAlertCompletedEventHandler(object sender, AddPhaseModifiedAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPhaseModifiedAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPhaseModifiedAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddDeliverableModifiedAlertCompletedEventHandler(object sender, AddDeliverableModifiedAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDeliverableModifiedAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDeliverableModifiedAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddActionItemModifiedAlertCompletedEventHandler(object sender, AddActionItemModifiedAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddActionItemModifiedAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActionItemModifiedAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void AddMultipleCategoryAlertCompletedEventHandler(object sender, AddMultipleCategoryAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMultipleCategoryAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMultipleCategoryAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void EnableAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DisableAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DeleteAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
