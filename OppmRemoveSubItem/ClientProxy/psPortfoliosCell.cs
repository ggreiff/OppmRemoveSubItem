//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 
namespace wsPortfoliosCell {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="psPortfoliosCellSoap", Namespace="http://prosight.com/wsdl/5.0/psPortfoliosCell/")]
    public partial class psPortfoliosCell : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DebugOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCellValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCellAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMultipleCellsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMultipleEditableCellsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleCellValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCellDisplayValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildrenMultipleCellValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOnlyModifiedCellsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleCellValuesAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildrenMultipleCellValuesAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleCellHistoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubItemsMultipleCellValuesAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMultipleCellsExOperationCompleted;
        
        /// <remarks/>
        public psPortfoliosCell() {
            this.Url = "http://localhost/ProSightWs/psPortfoliosCell.asmx";
        }
        
        /// <remarks/>
        public event DebugCompletedEventHandler DebugCompleted;
        
        /// <remarks/>
        public event UpdateCellCompletedEventHandler UpdateCellCompleted;
        
        /// <remarks/>
        public event getCellValueCompletedEventHandler getCellValueCompleted;
        
        /// <remarks/>
        public event UpdateCellAsOfCompletedEventHandler UpdateCellAsOfCompleted;
        
        /// <remarks/>
        public event UpdateMultipleCellsCompletedEventHandler UpdateMultipleCellsCompleted;
        
        /// <remarks/>
        public event UpdateMultipleEditableCellsCompletedEventHandler UpdateMultipleEditableCellsCompleted;
        
        /// <remarks/>
        public event GetMultipleCellValuesCompletedEventHandler GetMultipleCellValuesCompleted;
        
        /// <remarks/>
        public event UpdateCellDisplayValueCompletedEventHandler UpdateCellDisplayValueCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event GetChildrenMultipleCellValuesCompletedEventHandler GetChildrenMultipleCellValuesCompleted;
        
        /// <remarks/>
        public event UpdateOnlyModifiedCellsCompletedEventHandler UpdateOnlyModifiedCellsCompleted;
        
        /// <remarks/>
        public event GetMultipleCellValuesAsOfCompletedEventHandler GetMultipleCellValuesAsOfCompleted;
        
        /// <remarks/>
        public event GetChildrenMultipleCellValuesAsOfCompletedEventHandler GetChildrenMultipleCellValuesAsOfCompleted;
        
        /// <remarks/>
        public event GetMultipleCellHistoriesCompletedEventHandler GetMultipleCellHistoriesCompleted;
        
        /// <remarks/>
        public event GetSubItemsMultipleCellValuesAsOfCompletedEventHandler GetSubItemsMultipleCellValuesAsOfCompleted;
        
        /// <remarks/>
        public event UpdateMultipleCellsExCompletedEventHandler UpdateMultipleCellsExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/Debug", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psRETURN_VALUES Debug() {
            object[] results = this.Invoke("Debug", new object[0]);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebug(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Debug", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public psRETURN_VALUES EndDebug(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public void DebugAsync() {
            this.DebugAsync(null);
        }
        
        /// <remarks/>
        public void DebugAsync(object userState) {
            if ((this.DebugOperationCompleted == null)) {
                this.DebugOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebugOperationCompleted);
            }
            this.InvokeAsync("Debug", new object[0], this.DebugOperationCompleted, userState);
        }
        
        private void OnDebugOperationCompleted(object arg) {
            if ((this.DebugCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebugCompleted(this, new DebugCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateCell", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCell(string sCommonIDCategory, string sId, string sCategoryName, string sValue) {
            this.Invoke("UpdateCell", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCell(string sCommonIDCategory, string sId, string sCategoryName, string sValue, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCell", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCell(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCellAsync(string sCommonIDCategory, string sId, string sCategoryName, string sValue) {
            this.UpdateCellAsync(sCommonIDCategory, sId, sCategoryName, sValue, null);
        }
        
        /// <remarks/>
        public void UpdateCellAsync(string sCommonIDCategory, string sId, string sCategoryName, string sValue, object userState) {
            if ((this.UpdateCellOperationCompleted == null)) {
                this.UpdateCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCellOperationCompleted);
            }
            this.InvokeAsync("UpdateCell", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue}, this.UpdateCellOperationCompleted, userState);
        }
        
        private void OnUpdateCellOperationCompleted(object arg) {
            if ((this.UpdateCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCellCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/getCellValue", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCellValue(string sCommonIDCategory, string sId, string sCategoryName) {
            object[] results = this.Invoke("getCellValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCellValue(string sCommonIDCategory, string sId, string sCategoryName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCellValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetCellValue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCellValueAsync(string sCommonIDCategory, string sId, string sCategoryName) {
            this.getCellValueAsync(sCommonIDCategory, sId, sCategoryName, null);
        }
        
        /// <remarks/>
        public void getCellValueAsync(string sCommonIDCategory, string sId, string sCategoryName, object userState) {
            if ((this.getCellValueOperationCompleted == null)) {
                this.getCellValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCellValueOperationCompleted);
            }
            this.InvokeAsync("getCellValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName}, this.getCellValueOperationCompleted, userState);
        }
        
        private void OngetCellValueOperationCompleted(object arg) {
            if ((this.getCellValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCellValueCompleted(this, new getCellValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateCellAsOf", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCellAsOf(string sCommonIDCategory, string sId, string sCategoryName, string sValue, string sAs_Of) {
            this.Invoke("UpdateCellAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue,
                        sAs_Of});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCellAsOf(string sCommonIDCategory, string sId, string sCategoryName, string sValue, string sAs_Of, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCellAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue,
                        sAs_Of}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCellAsOf(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCellAsOfAsync(string sCommonIDCategory, string sId, string sCategoryName, string sValue, string sAs_Of) {
            this.UpdateCellAsOfAsync(sCommonIDCategory, sId, sCategoryName, sValue, sAs_Of, null);
        }
        
        /// <remarks/>
        public void UpdateCellAsOfAsync(string sCommonIDCategory, string sId, string sCategoryName, string sValue, string sAs_Of, object userState) {
            if ((this.UpdateCellAsOfOperationCompleted == null)) {
                this.UpdateCellAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCellAsOfOperationCompleted);
            }
            this.InvokeAsync("UpdateCellAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sValue,
                        sAs_Of}, this.UpdateCellAsOfOperationCompleted, userState);
        }
        
        private void OnUpdateCellAsOfOperationCompleted(object arg) {
            if ((this.UpdateCellAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCellAsOfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateMultipleCells", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMultipleCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            this.Invoke("UpdateMultipleCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateMultipleCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateMultipleCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateMultipleCells(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateMultipleCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            this.UpdateMultipleCellsAsync(sCommonIDCategory, sId, arCategoryValues, sAs_Of, null);
        }
        
        /// <remarks/>
        public void UpdateMultipleCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, object userState) {
            if ((this.UpdateMultipleCellsOperationCompleted == null)) {
                this.UpdateMultipleCellsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMultipleCellsOperationCompleted);
            }
            this.InvokeAsync("UpdateMultipleCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, this.UpdateMultipleCellsOperationCompleted, userState);
        }
        
        private void OnUpdateMultipleCellsOperationCompleted(object arg) {
            if ((this.UpdateMultipleCellsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMultipleCellsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateMultipleEditableCells", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] UpdateMultipleEditableCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            object[] results = this.Invoke("UpdateMultipleEditableCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateMultipleEditableCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateMultipleEditableCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndUpdateMultipleEditableCells(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMultipleEditableCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            this.UpdateMultipleEditableCellsAsync(sCommonIDCategory, sId, arCategoryValues, sAs_Of, null);
        }
        
        /// <remarks/>
        public void UpdateMultipleEditableCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, object userState) {
            if ((this.UpdateMultipleEditableCellsOperationCompleted == null)) {
                this.UpdateMultipleEditableCellsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMultipleEditableCellsOperationCompleted);
            }
            this.InvokeAsync("UpdateMultipleEditableCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, this.UpdateMultipleEditableCellsOperationCompleted, userState);
        }
        
        private void OnUpdateMultipleEditableCellsOperationCompleted(object arg) {
            if ((this.UpdateMultipleEditableCellsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMultipleEditableCellsCompleted(this, new UpdateMultipleEditableCellsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetMultipleCellValues", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetMultipleCellValues(string sCommonIDCategory, string sId, string[] arCategoryNames) {
            object[] results = this.Invoke("GetMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleCellValues(string sCommonIDCategory, string sId, string[] arCategoryNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetMultipleCellValues(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleCellValuesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames) {
            this.GetMultipleCellValuesAsync(sCommonIDCategory, sId, arCategoryNames, null);
        }
        
        /// <remarks/>
        public void GetMultipleCellValuesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, object userState) {
            if ((this.GetMultipleCellValuesOperationCompleted == null)) {
                this.GetMultipleCellValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleCellValuesOperationCompleted);
            }
            this.InvokeAsync("GetMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames}, this.GetMultipleCellValuesOperationCompleted, userState);
        }
        
        private void OnGetMultipleCellValuesOperationCompleted(object arg) {
            if ((this.GetMultipleCellValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleCellValuesCompleted(this, new GetMultipleCellValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateCellDisplayValue", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCellDisplayValue(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, string sAs_Of) {
            this.Invoke("UpdateCellDisplayValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        sAs_Of});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCellDisplayValue(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, string sAs_Of, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCellDisplayValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        sAs_Of}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCellDisplayValue(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCellDisplayValueAsync(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, string sAs_Of) {
            this.UpdateCellDisplayValueAsync(sCommonIDCategory, sId, sCategoryName, sDisplayValue, sAs_Of, null);
        }
        
        /// <remarks/>
        public void UpdateCellDisplayValueAsync(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, string sAs_Of, object userState) {
            if ((this.UpdateCellDisplayValueOperationCompleted == null)) {
                this.UpdateCellDisplayValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCellDisplayValueOperationCompleted);
            }
            this.InvokeAsync("UpdateCellDisplayValue", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        sAs_Of}, this.UpdateCellDisplayValueOperationCompleted, userState);
        }
        
        private void OnUpdateCellDisplayValueOperationCompleted(object arg) {
            if ((this.UpdateCellDisplayValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCellDisplayValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/Update", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, psINDICATOR lIndicator, string sAnnotation, string sAs_Of, int lUpdateFlags) {
            this.Invoke("Update", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        lIndicator,
                        sAnnotation,
                        sAs_Of,
                        lUpdateFlags});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, psINDICATOR lIndicator, string sAnnotation, string sAs_Of, int lUpdateFlags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        lIndicator,
                        sAnnotation,
                        sAs_Of,
                        lUpdateFlags}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAsync(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, psINDICATOR lIndicator, string sAnnotation, string sAs_Of, int lUpdateFlags) {
            this.UpdateAsync(sCommonIDCategory, sId, sCategoryName, sDisplayValue, lIndicator, sAnnotation, sAs_Of, lUpdateFlags, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(string sCommonIDCategory, string sId, string sCategoryName, string sDisplayValue, psINDICATOR lIndicator, string sAnnotation, string sAs_Of, int lUpdateFlags, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        sCommonIDCategory,
                        sId,
                        sCategoryName,
                        sDisplayValue,
                        lIndicator,
                        sAnnotation,
                        sAs_Of,
                        lUpdateFlags}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetChildrenMultipleCellValues", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetChildrenMultipleCellValues(string sCommonIDCategory, string sId, string[] arCategoryNames) {
            object[] results = this.Invoke("GetChildrenMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChildrenMultipleCellValues(string sCommonIDCategory, string sId, string[] arCategoryNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChildrenMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetChildrenMultipleCellValues(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChildrenMultipleCellValuesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames) {
            this.GetChildrenMultipleCellValuesAsync(sCommonIDCategory, sId, arCategoryNames, null);
        }
        
        /// <remarks/>
        public void GetChildrenMultipleCellValuesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, object userState) {
            if ((this.GetChildrenMultipleCellValuesOperationCompleted == null)) {
                this.GetChildrenMultipleCellValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildrenMultipleCellValuesOperationCompleted);
            }
            this.InvokeAsync("GetChildrenMultipleCellValues", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames}, this.GetChildrenMultipleCellValuesOperationCompleted, userState);
        }
        
        private void OnGetChildrenMultipleCellValuesOperationCompleted(object arg) {
            if ((this.GetChildrenMultipleCellValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildrenMultipleCellValuesCompleted(this, new GetChildrenMultipleCellValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateOnlyModifiedCells", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateOnlyModifiedCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            this.Invoke("UpdateOnlyModifiedCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateOnlyModifiedCells(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateOnlyModifiedCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateOnlyModifiedCells(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateOnlyModifiedCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of) {
            this.UpdateOnlyModifiedCellsAsync(sCommonIDCategory, sId, arCategoryValues, sAs_Of, null);
        }
        
        /// <remarks/>
        public void UpdateOnlyModifiedCellsAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, object userState) {
            if ((this.UpdateOnlyModifiedCellsOperationCompleted == null)) {
                this.UpdateOnlyModifiedCellsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOnlyModifiedCellsOperationCompleted);
            }
            this.InvokeAsync("UpdateOnlyModifiedCells", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of}, this.UpdateOnlyModifiedCellsOperationCompleted, userState);
        }
        
        private void OnUpdateOnlyModifiedCellsOperationCompleted(object arg) {
            if ((this.UpdateOnlyModifiedCellsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOnlyModifiedCellsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetMultipleCellValuesAsOf", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf) {
            object[] results = this.Invoke("GetMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetMultipleCellValuesAsOf(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf) {
            this.GetMultipleCellValuesAsOfAsync(sCommonIDCategory, sId, arCategoryNames, sAsOf, null);
        }
        
        /// <remarks/>
        public void GetMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf, object userState) {
            if ((this.GetMultipleCellValuesAsOfOperationCompleted == null)) {
                this.GetMultipleCellValuesAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleCellValuesAsOfOperationCompleted);
            }
            this.InvokeAsync("GetMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf}, this.GetMultipleCellValuesAsOfOperationCompleted, userState);
        }
        
        private void OnGetMultipleCellValuesAsOfOperationCompleted(object arg) {
            if ((this.GetMultipleCellValuesAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleCellValuesAsOfCompleted(this, new GetMultipleCellValuesAsOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetChildrenMultipleCellValuesAsOf", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetChildrenMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf) {
            object[] results = this.Invoke("GetChildrenMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChildrenMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChildrenMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetChildrenMultipleCellValuesAsOf(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChildrenMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf) {
            this.GetChildrenMultipleCellValuesAsOfAsync(sCommonIDCategory, sId, arCategoryNames, sAsOf, null);
        }
        
        /// <remarks/>
        public void GetChildrenMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sAsOf, object userState) {
            if ((this.GetChildrenMultipleCellValuesAsOfOperationCompleted == null)) {
                this.GetChildrenMultipleCellValuesAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildrenMultipleCellValuesAsOfOperationCompleted);
            }
            this.InvokeAsync("GetChildrenMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sAsOf}, this.GetChildrenMultipleCellValuesAsOfOperationCompleted, userState);
        }
        
        private void OnGetChildrenMultipleCellValuesAsOfOperationCompleted(object arg) {
            if ((this.GetChildrenMultipleCellValuesAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildrenMultipleCellValuesAsOfCompleted(this, new GetChildrenMultipleCellValuesAsOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetMultipleCellHistories", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetMultipleCellHistories(string sCommonIDCategory, string sId, string[] arCategoryNames, string sFrom, string sTo) {
            object[] results = this.Invoke("GetMultipleCellHistories", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sFrom,
                        sTo});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleCellHistories(string sCommonIDCategory, string sId, string[] arCategoryNames, string sFrom, string sTo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleCellHistories", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sFrom,
                        sTo}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetMultipleCellHistories(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleCellHistoriesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sFrom, string sTo) {
            this.GetMultipleCellHistoriesAsync(sCommonIDCategory, sId, arCategoryNames, sFrom, sTo, null);
        }
        
        /// <remarks/>
        public void GetMultipleCellHistoriesAsync(string sCommonIDCategory, string sId, string[] arCategoryNames, string sFrom, string sTo, object userState) {
            if ((this.GetMultipleCellHistoriesOperationCompleted == null)) {
                this.GetMultipleCellHistoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleCellHistoriesOperationCompleted);
            }
            this.InvokeAsync("GetMultipleCellHistories", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryNames,
                        sFrom,
                        sTo}, this.GetMultipleCellHistoriesOperationCompleted, userState);
        }
        
        private void OnGetMultipleCellHistoriesOperationCompleted(object arg) {
            if ((this.GetMultipleCellHistoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleCellHistoriesCompleted(this, new GetMultipleCellHistoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/GetSubItemsMultipleCellValuesAsOf", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellInfo[] GetSubItemsMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string sSubItemType, int lSubItemTypeID, string[] arCategoryNames, string sAsOf) {
            object[] results = this.Invoke("GetSubItemsMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sSubItemType,
                        lSubItemTypeID,
                        arCategoryNames,
                        sAsOf});
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSubItemsMultipleCellValuesAsOf(string sCommonIDCategory, string sId, string sSubItemType, int lSubItemTypeID, string[] arCategoryNames, string sAsOf, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubItemsMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sSubItemType,
                        lSubItemTypeID,
                        arCategoryNames,
                        sAsOf}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] EndGetSubItemsMultipleCellValuesAsOf(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubItemsMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string sSubItemType, int lSubItemTypeID, string[] arCategoryNames, string sAsOf) {
            this.GetSubItemsMultipleCellValuesAsOfAsync(sCommonIDCategory, sId, sSubItemType, lSubItemTypeID, arCategoryNames, sAsOf, null);
        }
        
        /// <remarks/>
        public void GetSubItemsMultipleCellValuesAsOfAsync(string sCommonIDCategory, string sId, string sSubItemType, int lSubItemTypeID, string[] arCategoryNames, string sAsOf, object userState) {
            if ((this.GetSubItemsMultipleCellValuesAsOfOperationCompleted == null)) {
                this.GetSubItemsMultipleCellValuesAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubItemsMultipleCellValuesAsOfOperationCompleted);
            }
            this.InvokeAsync("GetSubItemsMultipleCellValuesAsOf", new object[] {
                        sCommonIDCategory,
                        sId,
                        sSubItemType,
                        lSubItemTypeID,
                        arCategoryNames,
                        sAsOf}, this.GetSubItemsMultipleCellValuesAsOfOperationCompleted, userState);
        }
        
        private void OnGetSubItemsMultipleCellValuesAsOfOperationCompleted(object arg) {
            if ((this.GetSubItemsMultipleCellValuesAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubItemsMultipleCellValuesAsOfCompleted(this, new GetSubItemsMultipleCellValuesAsOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/5.0/psPortfoliosCell/UpdateMultipleCellsEx", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psPortfoliosCellUpdateStatus[] UpdateMultipleCellsEx(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, bool bModifiedOnly, bool bStopOnSecurityViolation, bool bStopOnAnyError) {
            object[] results = this.Invoke("UpdateMultipleCellsEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of,
                        bModifiedOnly,
                        bStopOnSecurityViolation,
                        bStopOnAnyError});
            return ((psPortfoliosCellUpdateStatus[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateMultipleCellsEx(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, bool bModifiedOnly, bool bStopOnSecurityViolation, bool bStopOnAnyError, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateMultipleCellsEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of,
                        bModifiedOnly,
                        bStopOnSecurityViolation,
                        bStopOnAnyError}, callback, asyncState);
        }
        
        /// <remarks/>
        public psPortfoliosCellUpdateStatus[] EndUpdateMultipleCellsEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psPortfoliosCellUpdateStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMultipleCellsExAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, bool bModifiedOnly, bool bStopOnSecurityViolation, bool bStopOnAnyError) {
            this.UpdateMultipleCellsExAsync(sCommonIDCategory, sId, arCategoryValues, sAs_Of, bModifiedOnly, bStopOnSecurityViolation, bStopOnAnyError, null);
        }
        
        /// <remarks/>
        public void UpdateMultipleCellsExAsync(string sCommonIDCategory, string sId, psPortfoliosCellInfo[] arCategoryValues, string sAs_Of, bool bModifiedOnly, bool bStopOnSecurityViolation, bool bStopOnAnyError, object userState) {
            if ((this.UpdateMultipleCellsExOperationCompleted == null)) {
                this.UpdateMultipleCellsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMultipleCellsExOperationCompleted);
            }
            this.InvokeAsync("UpdateMultipleCellsEx", new object[] {
                        sCommonIDCategory,
                        sId,
                        arCategoryValues,
                        sAs_Of,
                        bModifiedOnly,
                        bStopOnSecurityViolation,
                        bStopOnAnyError}, this.UpdateMultipleCellsExOperationCompleted, userState);
        }
        
        private void OnUpdateMultipleCellsExOperationCompleted(object arg) {
            if ((this.UpdateMultipleCellsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMultipleCellsExCompleted(this, new UpdateMultipleCellsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell")]
    public enum psRETURN_VALUES {
        
        /// <remarks/>
        ERR_OK,
        
        /// <remarks/>
        ERR_INTERNAL,
        
        /// <remarks/>
        ERR_COMMON_ID_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_COMMON_ID_UNKNOWN,
        
        /// <remarks/>
        ERR_MULTIPLE_COMMON_ID,
        
        /// <remarks/>
        ERR_NOT_ITEM,
        
        /// <remarks/>
        ERR_NO_NAME_GIVEN,
        
        /// <remarks/>
        ERR_PORTFOLIO_UNKNOWN,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_QBP,
        
        /// <remarks/>
        ERR_NAME_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_NOT_PORTFOLIO,
        
        /// <remarks/>
        ERR_PORTFOLIO_TYPE_MISMATCH,
        
        /// <remarks/>
        ERR_PHASE_NOT_FOUND,
        
        /// <remarks/>
        ERR_NO_SUCH_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_NO_COMMON_ID,
        
        /// <remarks/>
        ERR_ILLEGAL_STATUS,
        
        /// <remarks/>
        ERR_ILLEGAL_PORTFOLIO_TYPE,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_NOT_FOUND,
        
        /// <remarks/>
        ERR_ILLEGAL_GUID,
        
        /// <remarks/>
        ERR_NO_PHASES_FOR_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_ILLEGAL_DATE,
        
        /// <remarks/>
        ERR_ILLEGAL_DESCRIPTION,
        
        /// <remarks/>
        ERR_ITEM_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_NO_VALUE_LIST_NAME,
        
        /// <remarks/>
        ERR_VALUE_LIST_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_CANNOT_UPDATE_SYSTEM_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_TEXT_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_ID_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_VALUE_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_VALUE_ID_NOT_INTEGER,
        
        /// <remarks/>
        ERR_ILLEGAL_NAME,
        
        /// <remarks/>
        ERR_CATEGORY_NOT_SUPPORTED,
        
        /// <remarks/>
        ERR_CATEGORY_UNKNOWN,
        
        /// <remarks/>
        ERR_ILLEGAL_OPERATOR,
        
        /// <remarks/>
        ERR_VALUE_NOT_INTEGER,
        
        /// <remarks/>
        ERR_VALUE_NOT_NUMERIC,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_IN_SCOPE,
        
        /// <remarks/>
        ERR_ILLEGAL_INDICATOR,
        
        /// <remarks/>
        ERR_BAD_PARAMETER,
        
        /// <remarks/>
        ERR_ILLEGAL_DEPENDENCY,
        
        /// <remarks/>
        ERR_ADD_NEW_NEVER_CALLED,
        
        /// <remarks/>
        ERR_SECURITY_NOT_SET,
        
        /// <remarks/>
        ERR_SECURITY_VIOLATION,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_IN_PORTFOLIO,
        
        /// <remarks/>
        ERR_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_NO_DELETE_PERMISSION,
        
        /// <remarks/>
        ERR_NO_EDIT_PERMISSION_ON_PARENT,
        
        /// <remarks/>
        ERR_NO_FURTHER_DETAILS_AVAILABLE,
        
        /// <remarks/>
        ERR_DUPLICATE_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_PHASE_ACTUAL_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_PHASE_PLANED_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_MORE_THAN_ONE_CURRENT_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_MENU_XML_DOES_NOT_CONFORM_TO_XSD,
        
        /// <remarks/>
        ERR_SETTINGS_DO_NOT_EXIST,
        
        /// <remarks/>
        ERR_SETTINGS_ALREADY_EXIST,
        
        /// <remarks/>
        ERR_OBJECT_IN_USE,
        
        /// <remarks/>
        ERR_EXCEEDED_AUTHORIZED_NUMBER_OF_USERS,
        
        /// <remarks/>
        ERR_PHASE_FRCST_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_SPECIFIC_EMAIL_ALERT_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_XML_EXPORT_TEMPLATE_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_VALIDATION_ERROR,
        
        /// <remarks/>
        ERR_VERSION_NAME_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_ATTACHMENT_UNKNOWN,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell")]
    public partial class psPortfoliosCellInfo {
        
        private string categoryNameField;
        
        private string cellValueField;
        
        private string cellAsOfField;
        
        private string cellDisplayValueField;
        
        private psINDICATOR cellIndicatorField;
        
        private string cellAnnotationField;
        
        private string portfolioIdField;
        
        private bool securityDeniedField;
        
        private string updatedByField;
        
        private string cellIndicatorNameField;
        
        private int cellIndicatorIDField;
        
        public psPortfoliosCellInfo() {
            this.cellIndicatorField = psINDICATOR.NOT_SPECIFIED;
            this.cellIndicatorIDField = -2;
        }
        
        /// <remarks/>
        public string CategoryName {
            get {
                return this.categoryNameField;
            }
            set {
                this.categoryNameField = value;
            }
        }
        
        /// <remarks/>
        public string CellValue {
            get {
                return this.cellValueField;
            }
            set {
                this.cellValueField = value;
            }
        }
        
        /// <remarks/>
        public string CellAsOf {
            get {
                return this.cellAsOfField;
            }
            set {
                this.cellAsOfField = value;
            }
        }
        
        /// <remarks/>
        public string CellDisplayValue {
            get {
                return this.cellDisplayValueField;
            }
            set {
                this.cellDisplayValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psINDICATOR.NOT_SPECIFIED)]
        public psINDICATOR CellIndicator {
            get {
                return this.cellIndicatorField;
            }
            set {
                this.cellIndicatorField = value;
            }
        }
        
        /// <remarks/>
        public string CellAnnotation {
            get {
                return this.cellAnnotationField;
            }
            set {
                this.cellAnnotationField = value;
            }
        }
        
        /// <remarks/>
        public string PortfolioId {
            get {
                return this.portfolioIdField;
            }
            set {
                this.portfolioIdField = value;
            }
        }
        
        /// <remarks/>
        public bool SecurityDenied {
            get {
                return this.securityDeniedField;
            }
            set {
                this.securityDeniedField = value;
            }
        }
        
        /// <remarks/>
        public string UpdatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        public string CellIndicatorName {
            get {
                return this.cellIndicatorNameField;
            }
            set {
                this.cellIndicatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-2)]
        public int CellIndicatorID {
            get {
                return this.cellIndicatorIDField;
            }
            set {
                this.cellIndicatorIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell")]
    public enum psINDICATOR {
        
        /// <remarks/>
        IND_NONE,
        
        /// <remarks/>
        IND_RED,
        
        /// <remarks/>
        IND_YELLOW,
        
        /// <remarks/>
        IND_GREEN,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosCell")]
    public partial class psPortfoliosCellUpdateStatus {
        
        private string categoryNameField;
        
        private string cellAsOfField;
        
        private bool securityDeniedField;
        
        private psRETURN_VALUES errorCodeField;
        
        private string errorTextField;
        
        public psPortfoliosCellUpdateStatus() {
            this.errorCodeField = psRETURN_VALUES.NOT_SPECIFIED;
        }
        
        /// <remarks/>
        public string CategoryName {
            get {
                return this.categoryNameField;
            }
            set {
                this.categoryNameField = value;
            }
        }
        
        /// <remarks/>
        public string CellAsOf {
            get {
                return this.cellAsOfField;
            }
            set {
                this.cellAsOfField = value;
            }
        }
        
        /// <remarks/>
        public bool SecurityDenied {
            get {
                return this.securityDeniedField;
            }
            set {
                this.securityDeniedField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(psRETURN_VALUES.NOT_SPECIFIED)]
        public psRETURN_VALUES ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorText {
            get {
                return this.errorTextField;
            }
            set {
                this.errorTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DebugCompletedEventHandler(object sender, DebugCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psRETURN_VALUES Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psRETURN_VALUES)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateCellCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void getCellValueCompletedEventHandler(object sender, getCellValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCellValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCellValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateCellAsOfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateMultipleCellsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateMultipleEditableCellsCompletedEventHandler(object sender, UpdateMultipleEditableCellsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMultipleEditableCellsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMultipleEditableCellsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetMultipleCellValuesCompletedEventHandler(object sender, GetMultipleCellValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleCellValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleCellValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateCellDisplayValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetChildrenMultipleCellValuesCompletedEventHandler(object sender, GetChildrenMultipleCellValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildrenMultipleCellValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildrenMultipleCellValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateOnlyModifiedCellsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetMultipleCellValuesAsOfCompletedEventHandler(object sender, GetMultipleCellValuesAsOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleCellValuesAsOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleCellValuesAsOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetChildrenMultipleCellValuesAsOfCompletedEventHandler(object sender, GetChildrenMultipleCellValuesAsOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildrenMultipleCellValuesAsOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildrenMultipleCellValuesAsOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetMultipleCellHistoriesCompletedEventHandler(object sender, GetMultipleCellHistoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleCellHistoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleCellHistoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void GetSubItemsMultipleCellValuesAsOfCompletedEventHandler(object sender, GetSubItemsMultipleCellValuesAsOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubItemsMultipleCellValuesAsOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubItemsMultipleCellValuesAsOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateMultipleCellsExCompletedEventHandler(object sender, UpdateMultipleCellsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMultipleCellsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMultipleCellsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psPortfoliosCellUpdateStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psPortfoliosCellUpdateStatus[])(this.results[0]));
            }
        }
    }
}
