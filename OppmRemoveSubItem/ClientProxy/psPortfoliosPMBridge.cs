//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 
namespace wsPortfoliosPMBridge {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="psPortfoliosPMBridgeSoap", Namespace="http://prosight.com/wsdl/5.0/psPortfoliosPMBridge/")]
    public partial class psPortfoliosPMBridge : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DebugOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback SyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportOperationCompleted;
        
        /// <remarks/>
        public psPortfoliosPMBridge() {
            this.Url = "http://localhost/ProSightWs/psPortfoliosPMBridge.asmx";
        }
        
        /// <remarks/>
        public event DebugCompletedEventHandler DebugCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event PublishCompletedEventHandler PublishCompleted;
        
        /// <remarks/>
        public event SyncCompletedEventHandler SyncCompleted;
        
        /// <remarks/>
        public event PublishCreateCompletedEventHandler PublishCreateCompleted;
        
        /// <remarks/>
        public event ImportCompletedEventHandler ImportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/Debug", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public psRETURN_VALUES Debug() {
            object[] results = this.Invoke("Debug", new object[0]);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebug(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Debug", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public psRETURN_VALUES EndDebug(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((psRETURN_VALUES)(results[0]));
        }
        
        /// <remarks/>
        public void DebugAsync() {
            this.DebugAsync(null);
        }
        
        /// <remarks/>
        public void DebugAsync(object userState) {
            if ((this.DebugOperationCompleted == null)) {
                this.DebugOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebugOperationCompleted);
            }
            this.InvokeAsync("Debug", new object[0], this.DebugOperationCompleted, userState);
        }
        
        private void OnDebugOperationCompleted(object arg) {
            if ((this.DebugCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebugCompleted(this, new DebugCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/Update", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(string sCommonIDCategory, string sId) {
            this.Invoke("Update", new object[] {
                        sCommonIDCategory,
                        sId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAsync(string sCommonIDCategory, string sId) {
            this.UpdateAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        sCommonIDCategory,
                        sId}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/Publish", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Publish(string sCommonIDCategory, string sId) {
            this.Invoke("Publish", new object[] {
                        sCommonIDCategory,
                        sId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPublish(string sCommonIDCategory, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Publish", new object[] {
                        sCommonIDCategory,
                        sId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPublish(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PublishAsync(string sCommonIDCategory, string sId) {
            this.PublishAsync(sCommonIDCategory, sId, null);
        }
        
        /// <remarks/>
        public void PublishAsync(string sCommonIDCategory, string sId, object userState) {
            if ((this.PublishOperationCompleted == null)) {
                this.PublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishOperationCompleted);
            }
            this.InvokeAsync("Publish", new object[] {
                        sCommonIDCategory,
                        sId}, this.PublishOperationCompleted, userState);
        }
        
        private void OnPublishOperationCompleted(object arg) {
            if ((this.PublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/Sync", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Sync(string sServerName) {
            this.Invoke("Sync", new object[] {
                        sServerName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSync(string sServerName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Sync", new object[] {
                        sServerName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSync(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SyncAsync(string sServerName) {
            this.SyncAsync(sServerName, null);
        }
        
        /// <remarks/>
        public void SyncAsync(string sServerName, object userState) {
            if ((this.SyncOperationCompleted == null)) {
                this.SyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncOperationCompleted);
            }
            this.InvokeAsync("Sync", new object[] {
                        sServerName}, this.SyncOperationCompleted, userState);
        }
        
        private void OnSyncOperationCompleted(object arg) {
            if ((this.SyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/PublishCreate", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishCreate(string sCommonIDCategory, string sId, string sServerName, psPPM_MAPPING_MODE mappingMode) {
            this.Invoke("PublishCreate", new object[] {
                        sCommonIDCategory,
                        sId,
                        sServerName,
                        mappingMode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPublishCreate(string sCommonIDCategory, string sId, string sServerName, psPPM_MAPPING_MODE mappingMode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishCreate", new object[] {
                        sCommonIDCategory,
                        sId,
                        sServerName,
                        mappingMode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPublishCreate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PublishCreateAsync(string sCommonIDCategory, string sId, string sServerName, psPPM_MAPPING_MODE mappingMode) {
            this.PublishCreateAsync(sCommonIDCategory, sId, sServerName, mappingMode, null);
        }
        
        /// <remarks/>
        public void PublishCreateAsync(string sCommonIDCategory, string sId, string sServerName, psPPM_MAPPING_MODE mappingMode, object userState) {
            if ((this.PublishCreateOperationCompleted == null)) {
                this.PublishCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishCreateOperationCompleted);
            }
            this.InvokeAsync("PublishCreate", new object[] {
                        sCommonIDCategory,
                        sId,
                        sServerName,
                        mappingMode}, this.PublishCreateOperationCompleted, userState);
        }
        
        private void OnPublishCreateOperationCompleted(object arg) {
            if ((this.PublishCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCreateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://prosight.com/wsdl/Portfolios/4.0/psPortfoliosPMBridge/Import", RequestNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", ResponseNamespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Import(string sCommonIDCategory, string sServerName, string sPMProjectName, string sHomePortfolioID, string sManager, string sLifeCycle, psOPEN_CLOSED_STATUS status, string sDomain, psPPM_SYNC_MODE syncMode, psPPM_MAPPING_MODE mappingMode) {
            this.Invoke("Import", new object[] {
                        sCommonIDCategory,
                        sServerName,
                        sPMProjectName,
                        sHomePortfolioID,
                        sManager,
                        sLifeCycle,
                        status,
                        sDomain,
                        syncMode,
                        mappingMode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginImport(string sCommonIDCategory, string sServerName, string sPMProjectName, string sHomePortfolioID, string sManager, string sLifeCycle, psOPEN_CLOSED_STATUS status, string sDomain, psPPM_SYNC_MODE syncMode, psPPM_MAPPING_MODE mappingMode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Import", new object[] {
                        sCommonIDCategory,
                        sServerName,
                        sPMProjectName,
                        sHomePortfolioID,
                        sManager,
                        sLifeCycle,
                        status,
                        sDomain,
                        syncMode,
                        mappingMode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndImport(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ImportAsync(string sCommonIDCategory, string sServerName, string sPMProjectName, string sHomePortfolioID, string sManager, string sLifeCycle, psOPEN_CLOSED_STATUS status, string sDomain, psPPM_SYNC_MODE syncMode, psPPM_MAPPING_MODE mappingMode) {
            this.ImportAsync(sCommonIDCategory, sServerName, sPMProjectName, sHomePortfolioID, sManager, sLifeCycle, status, sDomain, syncMode, mappingMode, null);
        }
        
        /// <remarks/>
        public void ImportAsync(string sCommonIDCategory, string sServerName, string sPMProjectName, string sHomePortfolioID, string sManager, string sLifeCycle, psOPEN_CLOSED_STATUS status, string sDomain, psPPM_SYNC_MODE syncMode, psPPM_MAPPING_MODE mappingMode, object userState) {
            if ((this.ImportOperationCompleted == null)) {
                this.ImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportOperationCompleted);
            }
            this.InvokeAsync("Import", new object[] {
                        sCommonIDCategory,
                        sServerName,
                        sPMProjectName,
                        sHomePortfolioID,
                        sManager,
                        sLifeCycle,
                        status,
                        sDomain,
                        syncMode,
                        mappingMode}, this.ImportOperationCompleted, userState);
        }
        
        private void OnImportOperationCompleted(object arg) {
            if ((this.ImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge")]
    public enum psRETURN_VALUES {
        
        /// <remarks/>
        ERR_OK,
        
        /// <remarks/>
        ERR_INTERNAL,
        
        /// <remarks/>
        ERR_COMMON_ID_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_COMMON_ID_UNKNOWN,
        
        /// <remarks/>
        ERR_MULTIPLE_COMMON_ID,
        
        /// <remarks/>
        ERR_NOT_ITEM,
        
        /// <remarks/>
        ERR_NO_NAME_GIVEN,
        
        /// <remarks/>
        ERR_PORTFOLIO_UNKNOWN,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_QBP,
        
        /// <remarks/>
        ERR_NAME_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_NOT_PORTFOLIO,
        
        /// <remarks/>
        ERR_PORTFOLIO_TYPE_MISMATCH,
        
        /// <remarks/>
        ERR_PHASE_NOT_FOUND,
        
        /// <remarks/>
        ERR_NO_SUCH_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_NO_COMMON_ID,
        
        /// <remarks/>
        ERR_ILLEGAL_STATUS,
        
        /// <remarks/>
        ERR_ILLEGAL_PORTFOLIO_TYPE,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_NOT_FOUND,
        
        /// <remarks/>
        ERR_ILLEGAL_GUID,
        
        /// <remarks/>
        ERR_NO_PHASES_FOR_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_ILLEGAL_DATE,
        
        /// <remarks/>
        ERR_ILLEGAL_DESCRIPTION,
        
        /// <remarks/>
        ERR_ITEM_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_NO_VALUE_LIST_NAME,
        
        /// <remarks/>
        ERR_VALUE_LIST_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_CANNOT_UPDATE_SYSTEM_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_TEXT_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_DUPLICATE_ID_IN_VALUE_LIST,
        
        /// <remarks/>
        ERR_VALUE_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_VALUE_ID_NOT_INTEGER,
        
        /// <remarks/>
        ERR_ILLEGAL_NAME,
        
        /// <remarks/>
        ERR_CATEGORY_NOT_SUPPORTED,
        
        /// <remarks/>
        ERR_CATEGORY_UNKNOWN,
        
        /// <remarks/>
        ERR_ILLEGAL_OPERATOR,
        
        /// <remarks/>
        ERR_VALUE_NOT_INTEGER,
        
        /// <remarks/>
        ERR_VALUE_NOT_NUMERIC,
        
        /// <remarks/>
        ERR_PORTFOLIO_NOT_IN_SCOPE,
        
        /// <remarks/>
        ERR_ILLEGAL_INDICATOR,
        
        /// <remarks/>
        ERR_BAD_PARAMETER,
        
        /// <remarks/>
        ERR_ILLEGAL_DEPENDENCY,
        
        /// <remarks/>
        ERR_ADD_NEW_NEVER_CALLED,
        
        /// <remarks/>
        ERR_SECURITY_NOT_SET,
        
        /// <remarks/>
        ERR_SECURITY_VIOLATION,
        
        /// <remarks/>
        ERR_LIFE_CYCLE_IN_PORTFOLIO,
        
        /// <remarks/>
        ERR_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_NO_DELETE_PERMISSION,
        
        /// <remarks/>
        ERR_NO_EDIT_PERMISSION_ON_PARENT,
        
        /// <remarks/>
        ERR_NO_FURTHER_DETAILS_AVAILABLE,
        
        /// <remarks/>
        ERR_DUPLICATE_PHASE_IN_LIFE_CYCLE,
        
        /// <remarks/>
        ERR_PHASE_ACTUAL_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_PHASE_PLANED_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_MORE_THAN_ONE_CURRENT_PHASE_FOR_ITEM,
        
        /// <remarks/>
        ERR_MENU_XML_DOES_NOT_CONFORM_TO_XSD,
        
        /// <remarks/>
        ERR_SETTINGS_DO_NOT_EXIST,
        
        /// <remarks/>
        ERR_SETTINGS_ALREADY_EXIST,
        
        /// <remarks/>
        ERR_OBJECT_IN_USE,
        
        /// <remarks/>
        ERR_EXCEEDED_AUTHORIZED_NUMBER_OF_USERS,
        
        /// <remarks/>
        ERR_PHASE_FRCST_START_DATE_LATER_THAN_END_DATE,
        
        /// <remarks/>
        ERR_SPECIFIC_EMAIL_ALERT_ALREADY_EXISTS,
        
        /// <remarks/>
        ERR_XML_EXPORT_TEMPLATE_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_ERROR,
        
        /// <remarks/>
        ERR_XML_EXPORT_VALIDATION_ERROR,
        
        /// <remarks/>
        ERR_VERSION_NAME_DOES_NOT_EXIST,
        
        /// <remarks/>
        ERR_ATTACHMENT_UNKNOWN,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge")]
    public enum psPPM_MAPPING_MODE {
        
        /// <remarks/>
        PMM_NONE,
        
        /// <remarks/>
        PMM_PHASES,
        
        /// <remarks/>
        PMM_SUB_ITEMS,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge")]
    public enum psOPEN_CLOSED_STATUS {
        
        /// <remarks/>
        OCSTS_NONE,
        
        /// <remarks/>
        OCSTS_OPEN,
        
        /// <remarks/>
        OCSTS_CLOSED,
        
        /// <remarks/>
        OCSTS_CANDIDATE,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://prosight.com/type/Portfolios/5.0/psPortfoliosPMBridge")]
    public enum psPPM_SYNC_MODE {
        
        /// <remarks/>
        PSM_NONE,
        
        /// <remarks/>
        PSM_BLOCK_ALL_PUBLISHING_AND_UPDATING,
        
        /// <remarks/>
        PSM_DO_NOT_SYNC_PERIODICALLY,
        
        /// <remarks/>
        PSM_SYNC_PERIODICALLY,
        
        /// <remarks/>
        NOT_SPECIFIED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DebugCompletedEventHandler(object sender, DebugCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public psRETURN_VALUES Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((psRETURN_VALUES)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void PublishCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void SyncCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void PublishCreateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void ImportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
